import {
  __commonJS
} from "./chunk-2LSFTFF7.js";

// node_modules/@babel/runtime/helpers/classCallCheck.js
var require_classCallCheck = __commonJS({
  "node_modules/@babel/runtime/helpers/classCallCheck.js"(exports, module) {
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
    function _typeof(o) {
      "@babel/helpers - typeof";
      return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
    }
    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorRuntime.js
var require_regeneratorRuntime = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorRuntime.js"(exports, module) {
    var _typeof = require_typeof()["default"];
    function _regeneratorRuntime() {
      "use strict";
      module.exports = _regeneratorRuntime = function _regeneratorRuntime2() {
        return e;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function(t2, e2, r2) {
        t2[e2] = r2.value;
      }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag";
      function define(t2, e2, r2) {
        return Object.defineProperty(t2, e2, {
          value: r2,
          enumerable: true,
          configurable: true,
          writable: true
        }), t2[e2];
      }
      try {
        define({}, "");
      } catch (t2) {
        define = function define2(t3, e2, r2) {
          return t3[e2] = r2;
        };
      }
      function wrap(t2, e2, r2, n2) {
        var i2 = e2 && e2.prototype instanceof Generator ? e2 : Generator, a2 = Object.create(i2.prototype), c2 = new Context(n2 || []);
        return o(a2, "_invoke", {
          value: makeInvokeMethod(t2, r2, c2)
        }), a2;
      }
      function tryCatch(t2, e2, r2) {
        try {
          return {
            type: "normal",
            arg: t2.call(e2, r2)
          };
        } catch (t3) {
          return {
            type: "throw",
            arg: t3
          };
        }
      }
      e.wrap = wrap;
      var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var p = {};
      define(p, a, function() {
        return this;
      });
      var d = Object.getPrototypeOf, v = d && d(d(values([])));
      v && v !== r && n.call(v, a) && (p = v);
      var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
      function defineIteratorMethods(t2) {
        ["next", "throw", "return"].forEach(function(e2) {
          define(t2, e2, function(t3) {
            return this._invoke(e2, t3);
          });
        });
      }
      function AsyncIterator(t2, e2) {
        function invoke(r3, o2, i2, a2) {
          var c2 = tryCatch(t2[r3], t2, o2);
          if ("throw" !== c2.type) {
            var u2 = c2.arg, h2 = u2.value;
            return h2 && "object" == _typeof(h2) && n.call(h2, "__await") ? e2.resolve(h2.__await).then(function(t3) {
              invoke("next", t3, i2, a2);
            }, function(t3) {
              invoke("throw", t3, i2, a2);
            }) : e2.resolve(h2).then(function(t3) {
              u2.value = t3, i2(u2);
            }, function(t3) {
              return invoke("throw", t3, i2, a2);
            });
          }
          a2(c2.arg);
        }
        var r2;
        o(this, "_invoke", {
          value: function value(t3, n2) {
            function callInvokeWithMethodAndArg() {
              return new e2(function(e3, r3) {
                invoke(t3, n2, e3, r3);
              });
            }
            return r2 = r2 ? r2.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
        });
      }
      function makeInvokeMethod(e2, r2, n2) {
        var o2 = h;
        return function(i2, a2) {
          if (o2 === f)
            throw new Error("Generator is already running");
          if (o2 === s) {
            if ("throw" === i2)
              throw a2;
            return {
              value: t,
              done: true
            };
          }
          for (n2.method = i2, n2.arg = a2; ; ) {
            var c2 = n2.delegate;
            if (c2) {
              var u2 = maybeInvokeDelegate(c2, n2);
              if (u2) {
                if (u2 === y)
                  continue;
                return u2;
              }
            }
            if ("next" === n2.method)
              n2.sent = n2._sent = n2.arg;
            else if ("throw" === n2.method) {
              if (o2 === h)
                throw o2 = s, n2.arg;
              n2.dispatchException(n2.arg);
            } else
              "return" === n2.method && n2.abrupt("return", n2.arg);
            o2 = f;
            var p2 = tryCatch(e2, r2, n2);
            if ("normal" === p2.type) {
              if (o2 = n2.done ? s : l, p2.arg === y)
                continue;
              return {
                value: p2.arg,
                done: n2.done
              };
            }
            "throw" === p2.type && (o2 = s, n2.method = "throw", n2.arg = p2.arg);
          }
        };
      }
      function maybeInvokeDelegate(e2, r2) {
        var n2 = r2.method, o2 = e2.iterator[n2];
        if (o2 === t)
          return r2.delegate = null, "throw" === n2 && e2.iterator["return"] && (r2.method = "return", r2.arg = t, maybeInvokeDelegate(e2, r2), "throw" === r2.method) || "return" !== n2 && (r2.method = "throw", r2.arg = new TypeError("The iterator does not provide a '" + n2 + "' method")), y;
        var i2 = tryCatch(o2, e2.iterator, r2.arg);
        if ("throw" === i2.type)
          return r2.method = "throw", r2.arg = i2.arg, r2.delegate = null, y;
        var a2 = i2.arg;
        return a2 ? a2.done ? (r2[e2.resultName] = a2.value, r2.next = e2.nextLoc, "return" !== r2.method && (r2.method = "next", r2.arg = t), r2.delegate = null, y) : a2 : (r2.method = "throw", r2.arg = new TypeError("iterator result is not an object"), r2.delegate = null, y);
      }
      function pushTryEntry(t2) {
        var e2 = {
          tryLoc: t2[0]
        };
        1 in t2 && (e2.catchLoc = t2[1]), 2 in t2 && (e2.finallyLoc = t2[2], e2.afterLoc = t2[3]), this.tryEntries.push(e2);
      }
      function resetTryEntry(t2) {
        var e2 = t2.completion || {};
        e2.type = "normal", delete e2.arg, t2.completion = e2;
      }
      function Context(t2) {
        this.tryEntries = [{
          tryLoc: "root"
        }], t2.forEach(pushTryEntry, this), this.reset(true);
      }
      function values(e2) {
        if (e2 || "" === e2) {
          var r2 = e2[a];
          if (r2)
            return r2.call(e2);
          if ("function" == typeof e2.next)
            return e2;
          if (!isNaN(e2.length)) {
            var o2 = -1, i2 = function next() {
              for (; ++o2 < e2.length; )
                if (n.call(e2, o2))
                  return next.value = e2[o2], next.done = false, next;
              return next.value = t, next.done = true, next;
            };
            return i2.next = i2;
          }
        }
        throw new TypeError(_typeof(e2) + " is not iterable");
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
      }), o(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
      }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function(t2) {
        var e2 = "function" == typeof t2 && t2.constructor;
        return !!e2 && (e2 === GeneratorFunction || "GeneratorFunction" === (e2.displayName || e2.name));
      }, e.mark = function(t2) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(t2, GeneratorFunctionPrototype) : (t2.__proto__ = GeneratorFunctionPrototype, define(t2, u, "GeneratorFunction")), t2.prototype = Object.create(g), t2;
      }, e.awrap = function(t2) {
        return {
          __await: t2
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function() {
        return this;
      }), e.AsyncIterator = AsyncIterator, e.async = function(t2, r2, n2, o2, i2) {
        void 0 === i2 && (i2 = Promise);
        var a2 = new AsyncIterator(wrap(t2, r2, n2, o2), i2);
        return e.isGeneratorFunction(r2) ? a2 : a2.next().then(function(t3) {
          return t3.done ? t3.value : a2.next();
        });
      }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function() {
        return this;
      }), define(g, "toString", function() {
        return "[object Generator]";
      }), e.keys = function(t2) {
        var e2 = Object(t2), r2 = [];
        for (var n2 in e2)
          r2.push(n2);
        return r2.reverse(), function next() {
          for (; r2.length; ) {
            var t3 = r2.pop();
            if (t3 in e2)
              return next.value = t3, next.done = false, next;
          }
          return next.done = true, next;
        };
      }, e.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(e2) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = false, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e2)
            for (var r2 in this)
              "t" === r2.charAt(0) && n.call(this, r2) && !isNaN(+r2.slice(1)) && (this[r2] = t);
        },
        stop: function stop() {
          this.done = true;
          var t2 = this.tryEntries[0].completion;
          if ("throw" === t2.type)
            throw t2.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(e2) {
          if (this.done)
            throw e2;
          var r2 = this;
          function handle(n2, o3) {
            return a2.type = "throw", a2.arg = e2, r2.next = n2, o3 && (r2.method = "next", r2.arg = t), !!o3;
          }
          for (var o2 = this.tryEntries.length - 1; o2 >= 0; --o2) {
            var i2 = this.tryEntries[o2], a2 = i2.completion;
            if ("root" === i2.tryLoc)
              return handle("end");
            if (i2.tryLoc <= this.prev) {
              var c2 = n.call(i2, "catchLoc"), u2 = n.call(i2, "finallyLoc");
              if (c2 && u2) {
                if (this.prev < i2.catchLoc)
                  return handle(i2.catchLoc, true);
                if (this.prev < i2.finallyLoc)
                  return handle(i2.finallyLoc);
              } else if (c2) {
                if (this.prev < i2.catchLoc)
                  return handle(i2.catchLoc, true);
              } else {
                if (!u2)
                  throw new Error("try statement without catch or finally");
                if (this.prev < i2.finallyLoc)
                  return handle(i2.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(t2, e2) {
          for (var r2 = this.tryEntries.length - 1; r2 >= 0; --r2) {
            var o2 = this.tryEntries[r2];
            if (o2.tryLoc <= this.prev && n.call(o2, "finallyLoc") && this.prev < o2.finallyLoc) {
              var i2 = o2;
              break;
            }
          }
          i2 && ("break" === t2 || "continue" === t2) && i2.tryLoc <= e2 && e2 <= i2.finallyLoc && (i2 = null);
          var a2 = i2 ? i2.completion : {};
          return a2.type = t2, a2.arg = e2, i2 ? (this.method = "next", this.next = i2.finallyLoc, y) : this.complete(a2);
        },
        complete: function complete(t2, e2) {
          if ("throw" === t2.type)
            throw t2.arg;
          return "break" === t2.type || "continue" === t2.type ? this.next = t2.arg : "return" === t2.type ? (this.rval = this.arg = t2.arg, this.method = "return", this.next = "end") : "normal" === t2.type && e2 && (this.next = e2), y;
        },
        finish: function finish(t2) {
          for (var e2 = this.tryEntries.length - 1; e2 >= 0; --e2) {
            var r2 = this.tryEntries[e2];
            if (r2.finallyLoc === t2)
              return this.complete(r2.completion, r2.afterLoc), resetTryEntry(r2), y;
          }
        },
        "catch": function _catch(t2) {
          for (var e2 = this.tryEntries.length - 1; e2 >= 0; --e2) {
            var r2 = this.tryEntries[e2];
            if (r2.tryLoc === t2) {
              var n2 = r2.completion;
              if ("throw" === n2.type) {
                var o2 = n2.arg;
                resetTryEntry(r2);
              }
              return o2;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(e2, r2, n2) {
          return this.delegate = {
            iterator: values(e2),
            resultName: r2,
            nextLoc: n2
          }, "next" === this.method && (this.arg = t), y;
        }
      }, e;
    }
    module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/regenerator/index.js
var require_regenerator = __commonJS({
  "node_modules/@babel/runtime/regenerator/index.js"(exports, module) {
    var runtime = require_regeneratorRuntime()();
    module.exports = runtime;
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }
});

// node_modules/@babel/runtime/helpers/asyncToGenerator.js
var require_asyncToGenerator = __commonJS({
  "node_modules/@babel/runtime/helpers/asyncToGenerator.js"(exports, module) {
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/toPrimitive.js
var require_toPrimitive = __commonJS({
  "node_modules/@babel/runtime/helpers/toPrimitive.js"(exports, module) {
    var _typeof = require_typeof()["default"];
    function toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t)
        return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i))
          return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    module.exports = toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/toPropertyKey.js
var require_toPropertyKey = __commonJS({
  "node_modules/@babel/runtime/helpers/toPropertyKey.js"(exports, module) {
    var _typeof = require_typeof()["default"];
    var toPrimitive = require_toPrimitive();
    function toPropertyKey(t) {
      var i = toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : String(i);
    }
    module.exports = toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/@babel/runtime/helpers/defineProperty.js"(exports, module) {
    var toPropertyKey = require_toPropertyKey();
    function _defineProperty(obj, key, value) {
      key = toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/arrayWithHoles.js
var require_arrayWithHoles = __commonJS({
  "node_modules/@babel/runtime/helpers/arrayWithHoles.js"(exports, module) {
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/iterableToArrayLimit.js
var require_iterableToArrayLimit = __commonJS({
  "node_modules/@babel/runtime/helpers/iterableToArrayLimit.js"(exports, module) {
    function _iterableToArrayLimit(r, l) {
      var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
      if (null != t) {
        var e, n, i, u, a = [], f = true, o = false;
        try {
          if (i = (t = t.call(r)).next, 0 === l) {
            if (Object(t) !== t)
              return;
            f = false;
          } else
            for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true)
              ;
        } catch (r2) {
          o = true, n = r2;
        } finally {
          try {
            if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u))
              return;
          } finally {
            if (o)
              throw n;
          }
        }
        return a;
      }
    }
    module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/arrayLikeToArray.js
var require_arrayLikeToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/arrayLikeToArray.js"(exports, module) {
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js
var require_unsupportedIterableToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js"(exports, module) {
    var arrayLikeToArray = require_arrayLikeToArray();
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return arrayLikeToArray(o, minLen);
    }
    module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/nonIterableRest.js
var require_nonIterableRest = __commonJS({
  "node_modules/@babel/runtime/helpers/nonIterableRest.js"(exports, module) {
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/slicedToArray.js
var require_slicedToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/slicedToArray.js"(exports, module) {
    var arrayWithHoles = require_arrayWithHoles();
    var iterableToArrayLimit = require_iterableToArrayLimit();
    var unsupportedIterableToArray = require_unsupportedIterableToArray();
    var nonIterableRest = require_nonIterableRest();
    function _slicedToArray(arr, i) {
      return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
    }
    module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/bent/src/core.js
var require_core = __commonJS({
  "node_modules/bent/src/core.js"(exports, module) {
    "use strict";
    var encodings = /* @__PURE__ */ new Set(["json", "buffer", "string"]);
    module.exports = (mkrequest) => (...args) => {
      const statusCodes = /* @__PURE__ */ new Set();
      let method;
      let encoding;
      let headers;
      let baseurl = "";
      args.forEach((arg) => {
        if (typeof arg === "string") {
          if (arg.toUpperCase() === arg) {
            if (method) {
              const msg = `Can't set method to ${arg}, already set to ${method}.`;
              throw new Error(msg);
            } else {
              method = arg;
            }
          } else if (arg.startsWith("http:") || arg.startsWith("https:")) {
            baseurl = arg;
          } else {
            if (encodings.has(arg)) {
              encoding = arg;
            } else {
              throw new Error(`Unknown encoding, ${arg}`);
            }
          }
        } else if (typeof arg === "number") {
          statusCodes.add(arg);
        } else if (typeof arg === "object") {
          if (Array.isArray(arg) || arg instanceof Set) {
            arg.forEach((code) => statusCodes.add(code));
          } else {
            if (headers) {
              throw new Error("Cannot set headers twice.");
            }
            headers = arg;
          }
        } else {
          throw new Error(`Unknown type: ${typeof arg}`);
        }
      });
      if (!method)
        method = "GET";
      if (statusCodes.size === 0) {
        statusCodes.add(200);
      }
      return mkrequest(statusCodes, method, encoding, headers, baseurl);
    };
  }
});

// node_modules/bent/src/browser.js
var require_browser = __commonJS({
  "node_modules/bent/src/browser.js"(exports, module) {
    "use strict";
    var core = require_core();
    var StatusError = class _StatusError extends Error {
      constructor(res, ...params) {
        super(...params);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, _StatusError);
        }
        this.name = "StatusError";
        this.message = res.statusMessage;
        this.statusCode = res.status;
        this.res = res;
        this.json = res.json.bind(res);
        this.text = res.text.bind(res);
        this.arrayBuffer = res.arrayBuffer.bind(res);
        let buffer;
        const get = () => {
          if (!buffer)
            buffer = this.arrayBuffer();
          return buffer;
        };
        Object.defineProperty(this, "responseBody", { get });
        this.headers = {};
        for (const [key, value] of res.headers.entries()) {
          this.headers[key.toLowerCase()] = value;
        }
      }
    };
    var mkrequest = (statusCodes, method, encoding, headers, baseurl) => async (_url, body, _headers = {}) => {
      _url = baseurl + (_url || "");
      let parsed = new URL(_url);
      if (!headers)
        headers = {};
      if (parsed.username) {
        headers.Authorization = "Basic " + btoa(parsed.username + ":" + parsed.password);
        parsed = new URL(parsed.protocol + "//" + parsed.host + parsed.pathname + parsed.search);
      }
      if (parsed.protocol !== "https:" && parsed.protocol !== "http:") {
        throw new Error(`Unknown protocol, ${parsed.protocol}`);
      }
      if (body) {
        if (body instanceof ArrayBuffer || ArrayBuffer.isView(body) || typeof body === "string") {
        } else if (typeof body === "object") {
          body = JSON.stringify(body);
          headers["Content-Type"] = "application/json";
        } else {
          throw new Error("Unknown body type.");
        }
      }
      _headers = new Headers({ ...headers || {}, ..._headers });
      const resp = await fetch(parsed, { method, headers: _headers, body });
      resp.statusCode = resp.status;
      if (!statusCodes.has(resp.status)) {
        throw new StatusError(resp);
      }
      if (encoding === "json")
        return resp.json();
      else if (encoding === "buffer")
        return resp.arrayBuffer();
      else if (encoding === "string")
        return resp.text();
      else
        return resp;
    };
    module.exports = core(mkrequest);
  }
});

// node_modules/paymongo/dist/index.js
var require_dist = __commonJS({
  "node_modules/paymongo/dist/index.js"(exports, module) {
    function _interopDefault(e) {
      return e && "object" == typeof e && "default" in e ? e.default : e;
    }
    var _classCallCheck = _interopDefault(require_classCallCheck());
    var _regeneratorRuntime = _interopDefault(require_regenerator());
    var _asyncToGenerator = _interopDefault(require_asyncToGenerator());
    var _defineProperty = _interopDefault(require_defineProperty());
    var _slicedToArray = _interopDefault(require_slicedToArray());
    var bent = _interopDefault(require_browser());
    function ownKeys(r, e) {
      var t, n = Object.keys(r);
      return Object.getOwnPropertySymbols && (t = Object.getOwnPropertySymbols(r), e && (t = t.filter(function(e2) {
        return Object.getOwnPropertyDescriptor(r, e2).enumerable;
      })), n.push.apply(n, t)), n;
    }
    function _objectSpread(r) {
      for (var t, e = 1; e < arguments.length; e++)
        t = null == arguments[e] ? {} : arguments[e], e % 2 ? ownKeys(Object(t), true).forEach(function(e2) {
          _defineProperty(r, e2, t[e2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(r, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(e2) {
          Object.defineProperty(r, e2, Object.getOwnPropertyDescriptor(t, e2));
        });
      return r;
    }
    var PAYMONGO_API_URL = "https://api.paymongo.com/v1";
    var makeRequest = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r) {
        var t, n, a, o, c, u, i;
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                if (t = r.data, n = r.method, a = r.path, o = r.secret, c = { Authorization: "Basic ".concat(Buffer.from(o).toString("base64")) }, u = bent(PAYMONGO_API_URL, n || "GET", "json", c, 200), a) {
                  e3.next = 5;
                  break;
                }
                throw new Error("API endpoint required");
              case 5:
                return i = [a], t && i.push(t), e3.abrupt("return", u.apply(void 0, i).catch(function() {
                  var e4 = _asyncToGenerator(_regeneratorRuntime.mark(function e5(r2) {
                    var t2, n2, a2, o2;
                    return _regeneratorRuntime.wrap(function(e6) {
                      for (; ; )
                        switch (e6.prev = e6.next) {
                          case 0:
                            return e6.next = 2, r2.json();
                          case 2:
                            throw t2 = e6.sent, n2 = t2.errors, a2 = _slicedToArray(n2, 1), _objectSpread(_objectSpread({}, o2 = a2[0]), {}, { message: o2.detail });
                          case 6:
                          case "end":
                            return e6.stop();
                        }
                    }, e5);
                  }));
                  return function() {
                    return e4.apply(this, arguments);
                  };
                }()));
              case 8:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var createLink = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r, t) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                if (0 === Object.entries(t).length || !t.constructor === Object)
                  throw new Error("Data is required!");
                e3.next = 2;
                break;
              case 2:
                return e3.abrupt("return", makeRequest({ secret: r, method: "POST", path: "/links", data: t }));
              case 3:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var retrieveLink = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r, t) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                return e3.abrupt("return", makeRequest({ secret: r, method: "GET", path: "/links/".concat(t) }));
              case 1:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var getLinkByReference = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r, t) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                return e3.abrupt("return", makeRequest({ secret: r, method: "GET", path: "/links?reference_number=".concat(t) }));
              case 1:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var archiveLink = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r, t) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                return e3.abrupt("return", makeRequest({ secret: r, method: "POST", path: "/links/".concat(t, "/archive") }));
              case 1:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var unarchiveLink = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r, t) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                return e3.abrupt("return", makeRequest({ secret: r, method: "POST", path: "/links/".concat(t, "/unarchive") }));
              case 1:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var createPayment = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r, t) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                if (0 === Object.entries(t).length || !t.constructor === Object)
                  throw new Error("Data is required!");
                e3.next = 2;
                break;
              case 2:
                return e3.abrupt("return", makeRequest({ secret: r, method: "POST", path: "/payments", data: t }));
              case 3:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var retrievePayment = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r, t) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                if (t) {
                  e3.next = 2;
                  break;
                }
                throw new Error("Payment id is required.");
              case 2:
                return e3.abrupt("return", makeRequest({ secret: r, method: "GET", path: "/payments/".concat(t) }));
              case 3:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var listPayments = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                return e3.abrupt("return", makeRequest({ secret: r, method: "GET", path: "/payments" }));
              case 1:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var createPaymentIntent = function(e, r) {
      if (0 === Object.entries(r).length || !r.constructor === Object)
        throw new Error("Data is required!");
      return makeRequest({ secret: e, method: "POST", path: "/payment_intents", data: r });
    };
    var retrievePaymentIntent = function(e, r) {
      if (!r)
        throw new Error("PaymentIntent id is required.");
      return makeRequest({ secret: e, method: "GET", path: "/payment_intents/".concat(r) });
    };
    var attachToPaymentIntent = function(e, r, t) {
      if (0 === Object.entries(t).length || !t.constructor === Object)
        throw new Error("Data is required!");
      return makeRequest({ secret: e, method: "POST", path: "/payment_intents/".concat(r, "/attach"), data: t });
    };
    var capturePaymentIntent = function(e, r) {
      if (!r)
        throw new Error("PaymentIntent id is required.");
      return makeRequest({ secret: e, method: "POST", path: "/payment_intents/".concat(r, "/capture") });
    };
    var cancelPaymentIntent = function(e, r) {
      if (!r)
        throw new Error("PaymentIntent id is required.");
      return makeRequest({ secret: e, method: "POST", path: "/payment_intents/".concat(r, "/cancel") });
    };
    var createPaymentMethod = function(e, r) {
      if (0 === Object.entries(r).length || !r.constructor === Object)
        throw new Error("Data is required!");
      return makeRequest({ secret: e, method: "POST", path: "/payment_methods", data: r });
    };
    var retrievePaymentMethod = function(e, r) {
      if (!r)
        throw new Error("PaymentMethod id is required.");
      return makeRequest({ secret: e, method: "GET", path: "/payment_methods/".concat(r) });
    };
    var createRefund = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r, t) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                if (0 === Object.entries(t).length || !t.constructor === Object)
                  throw new Error("Data is required!");
                e3.next = 2;
                break;
              case 2:
                return e3.abrupt("return", makeRequest({ secret: r, method: "POST", path: "/refunds", data: t }));
              case 3:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var retrieveRefund = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r, t) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                return e3.abrupt("return", makeRequest({ secret: r, method: "GET", path: "/refunds/".concat(t) }));
              case 1:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var listRefunds = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                return e3.abrupt("return", makeRequest({ secret: r, method: "GET", path: "/refunds" }));
              case 1:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var createSource = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r, t) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                if (0 === Object.entries(t).length || !t.constructor === Object)
                  throw new Error("Data is required!");
                e3.next = 2;
                break;
              case 2:
                return e3.abrupt("return", makeRequest({ secret: r, method: "POST", path: "/sources", data: t }));
              case 3:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var retrieveSource = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r, t) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                if (t) {
                  e3.next = 2;
                  break;
                }
                throw new Error("Source id is required.");
              case 2:
                return e3.abrupt("return", makeRequest({ secret: r, method: "GET", path: "/sources/".concat(t) }));
              case 3:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var createToken = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r, t) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                if (console.warn("Deprecated: Tokens are now deprecated. https://developers.paymongo.com/reference#token-resource"), 0 === Object.entries(t).length || !t.constructor === Object)
                  throw new Error("Data is required!");
                e3.next = 3;
                break;
              case 3:
                return e3.abrupt("return", makeRequest({ secret: r, method: "POST", path: "/tokens", data: t }));
              case 4:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var retrieveToken = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r, t) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                if (console.warn("Deprecated: Tokens are now deprecated. https://developers.paymongo.com/reference#token-resource"), t) {
                  e3.next = 3;
                  break;
                }
                throw new Error("Token id is required.");
              case 3:
                return e3.abrupt("return", makeRequest({ secret: r, method: "GET", path: "/tokens/".concat(t) }));
              case 4:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var createWebhook = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r, t) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                if (0 === Object.entries(t).length || !t.constructor === Object)
                  throw new Error("Data is required!");
                e3.next = 2;
                break;
              case 2:
                return e3.abrupt("return", makeRequest({ secret: r, method: "POST", path: "/webhooks", data: t }));
              case 3:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var retrieveWebhook = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r, t) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                return e3.abrupt("return", makeRequest({ secret: r, method: "GET", path: "/webhooks/".concat(t) }));
              case 1:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var listWebhooks = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                return e3.abrupt("return", makeRequest({ secret: r, method: "GET", path: "/webhooks" }));
              case 1:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var toggleWebhook = function() {
      var e = _asyncToGenerator(_regeneratorRuntime.mark(function e2(r, t, n) {
        return _regeneratorRuntime.wrap(function(e3) {
          for (; ; )
            switch (e3.prev = e3.next) {
              case 0:
                if (t) {
                  e3.next = 2;
                  break;
                }
                throw new Error("Webhook id is required.");
              case 2:
                if ("enable" !== n && "disable" !== n)
                  throw new Error("Invalid action. Must be one of ('enable', 'disable')");
                e3.next = 4;
                break;
              case 4:
                return e3.abrupt("return", makeRequest({ secret: r, method: "POST", path: "/webhooks/".concat(t, "/").concat(n) }));
              case 5:
              case "end":
                return e3.stop();
            }
        }, e2);
      }));
      return function() {
        return e.apply(this, arguments);
      };
    }();
    var Paymongo = function e(r) {
      var t = this;
      if (_classCallCheck(this, e), e.instance instanceof e)
        return e.instance;
      if (!r)
        throw new Error("API key is required!");
      this.secret = r, this.paymentMethods = { create: function(e2) {
        return createPaymentMethod(t.secret, e2);
      }, retrieve: function(e2) {
        return retrievePaymentMethod(t.secret, e2);
      } }, this.paymentIntents = { create: function(e2) {
        return createPaymentIntent(t.secret, e2);
      }, retrieve: function(e2) {
        return retrievePaymentIntent(t.secret, e2);
      }, attach: function(e2, r2) {
        return attachToPaymentIntent(t.secret, e2, r2);
      }, capture: function(e2) {
        return capturePaymentIntent(e2);
      }, cancel: function(e2) {
        return cancelPaymentIntent(e2);
      } }, this.sources = { create: function(e2) {
        return createSource(t.secret, e2);
      }, retrieve: function(e2) {
        return retrieveSource(t.secret, e2);
      } }, this.payments = { create: function(e2) {
        return createPayment(t.secret, e2);
      }, retrieve: function(e2) {
        return retrievePayment(t.secret, e2);
      }, list: function() {
        return listPayments(t.secret);
      } }, this.tokens = { create: function(e2) {
        return createToken(t.secret, e2);
      }, retrieve: function(e2) {
        return retrieveToken(t.secret, e2);
      } }, this.webhooks = { create: function(e2) {
        return createWebhook(t.secret, e2);
      }, retrieve: function(e2) {
        return retrieveWebhook(t.secret, e2);
      }, list: function() {
        return listWebhooks(t.secret);
      }, toggle: function(e2, r2) {
        return toggleWebhook(t.secret, e2, r2);
      } }, this.refunds = { create: function(e2) {
        return createRefund(t.secret, e2);
      }, retrieve: function(e2) {
        return retrieveRefund(t.secret, e2);
      }, list: function() {
        return listRefunds(t.secret);
      } }, this.links = { create: function(e2) {
        return createLink(t.secret, e2);
      }, retrieve: function(e2) {
        return retrieveLink(t.secret, e2);
      }, getByRef: function(e2) {
        return getLinkByReference(t.secret, e2);
      }, archive: function(e2) {
        return archiveLink(t.secret, e2);
      }, unarchive: function(e2) {
        return unarchiveLink(t.secret, e2);
      } }, Object.freeze(this.secret), Object.freeze(this), e.instance = this;
    };
    module.exports = Paymongo;
  }
});
export default require_dist();
/*! Bundled license information:

@babel/runtime/helpers/regeneratorRuntime.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE *)
*/
//# sourceMappingURL=paymongo.js.map
